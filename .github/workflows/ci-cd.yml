name: CI/CD DevSecOps

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

jobs:
  prep:
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ github.workspace }} 
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Create tests_results directory
        run: mkdir -p tests_results

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt -r dev-requirements.txt

      - name: Run unit tests with coverage
        run: |
          pytest tests/unit --maxfail=1 --disable-warnings -q --cov=app --cov-report=xml:tests_results/coverage/coverage.xml --cov-report=html:tests_results/coverage --junit-xml=tests_results/unit_result.xml
          junit2html tests_results/unit_result.xml tests_results/unit_result.html

      - name: Run integration tests
        run: |
          pytest tests/integration --maxfail=1 --disable-warnings -q --cov=app --cov-append --cov-report=xml:tests_results/coverage/coverage.xml --cov-report=html:tests_results/coverage --junit-xml=tests_results/integration_result.xml
          junit2html tests_results/integration_result.xml tests_results/integration_result.html

      - name: Upload tests_results logs
        uses: actions/upload-artifact@v4
        with:
          name: pytest-logs
          path: tests_results

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  iac_scan:
    needs: prep
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Create tests_results directory
        run: mkdir -p tests_results

      - name: TFSec scan (JSON)
        uses: aquasecurity/tfsec-action@v1.0.3

      - name: Checkov scan (JSON)
        run: |
          docker run --rm -v $PWD/terraform:/tf bridgecrew/checkov -o json > tests_results/checkov_results.json

      - name: Upload IaC scan tests_results
        uses: actions/upload-artifact@v4
        with:
          name: iac-scan-results
          path: |
            tests_results/tfsec_results.json
            tests_results/checkov_results.json

  deploy:
    needs: [prep, iac_scan]
    runs-on: ubuntu-latest
    outputs:
      app_url: ${{ steps.set-url.outputs.app_url }}
    env:
      TF_VAR_resource_group_name: ${{ secrets.RESOURCE_GROUP_NAME }}
      TF_VAR_app_name:           ${{ secrets.APP_NAME }}
      TF_VAR_key_vault_name:     ${{ secrets.KEY_VAULT_NAME }}
      TF_VAR_owner_tag:          ${{ secrets.OWNER_TAG }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
            fetch-depth: 0 

      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run: terraform -chdir=terraform init -input=false

      - name: Terraform Plan
        run: terraform -chdir=terraform plan -out=tfplan -input=false

      - name: Terraform Apply
        id: apply
        run: terraform -chdir=terraform apply -input=false -auto-approve tfplan

      - name: Set app_url output
        id: set-url
        run: echo "app_url=$(terraform -chdir=terraform output -raw app_url)" >> $GITHUB_OUTPUT

      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ secrets.APP_NAME }}
          package: ./app

  configure_app:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install Ansible and Azure CLI
        run: |
          python -m pip install --upgrade pip
          pip install ansible azure-cli
          ansible-galaxy collection install -r ansible/requirements.yml

      - name: Create artifacts directory
        run: mkdir -p artifacts

      - name: Configure Azure App Service (Ansible)
        env:
          RESOURCE_GROUP_NAME:   ${{ secrets.RESOURCE_GROUP_NAME }}
          APP_NAME:              ${{ secrets.APP_NAME }}
          KEY_VAULT_NAME:        ${{ secrets.KEY_VAULT_NAME }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_TENANT_ID:       ${{ secrets.AZURE_TENANT_ID }}
        run: ansible-playbook ansible/playbooks/configure_app_service.yml | tee artifacts/ansible.log

      - name: Upload Ansible logs
        uses: actions/upload-artifact@v4
        with:
          name: ansible-logs
          path: artifacts/ansible.log

  dast:
    needs: [deploy, configure_app]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 

      - name: Create artifacts directory
        run: mkdir -p artifacts

      - name: OWASP ZAP full scan
        run: |
          docker run --rm \
            -v $PWD/artifacts:/zap/wrk/:rw \
            -t owasp/zap2docker-stable \
            zap-full-scan.py \
              -t ${{ needs.deploy.outputs.app_url }} \
              -r zap_report.html \
              -J zap_report.json

      - name: Upload ZAP report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: |
            artifacts/zap_report.html
            artifacts/zap_report.json

  metrics:
    needs: [deploy, dast]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
            fetch-depth: 0 

      - name: Create artifacts directory
        run: mkdir -p artifacts

      - name: Login to Azure for metrics
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install pandas for metrics
        run: pip install pandas

      - name: Collect all metrics
        run: python3 scripts/collect_metrics.py | tee artifacts/metrics.log

      - name: Upload metrics artifacts
        uses: actions/upload-artifact@v4
        with:
          name: metrics-logs
          path: |
            artifacts/metrics.log
            artifacts/metrics.csv

      - name: Check Azure Policy compliance
        run: az policy state list --resource-group ${{ secrets.RESOURCE_GROUP_NAME }} | tee artifacts/policy_compliance.json

      - name: Upload policy compliance
        uses: actions/upload-artifact@v4
        with:
          name: policy-compliance
          path: artifacts/policy_compliance.json
